{"remainingRequest":"/home/runner/work/U3_Fundamentos_de_Software/U3_Fundamentos_de_Software/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Fundamentos_de_Software/U3_Fundamentos_de_Software/src/views/curso/Tema1.vue?vue&type=template&id=0e7a3b1b&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Fundamentos_de_Software/U3_Fundamentos_de_Software/src/views/curso/Tema1.vue","mtime":1758493661686},{"path":"/home/runner/work/U3_Fundamentos_de_Software/U3_Fundamentos_de_Software/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_de_Software/U3_Fundamentos_de_Software/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_de_Software/U3_Fundamentos_de_Software/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_de_Software/U3_Fundamentos_de_Software/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_de_Software/U3_Fundamentos_de_Software/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}